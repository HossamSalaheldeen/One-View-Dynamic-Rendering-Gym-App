$(function(){

    $.ajaxSetup({
        headers: {
            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content"),
        },

        success: function (res) {
            if (res){
                if (res.message){
                    fireSweetAlert('success',res.message)
                }
            }
        },

        error: function (res) {

            if (res.status == 422) {
                fireSweetAlert('error', Object.values(res.responseJSON.errors)[0][0]);
            }

            if (res.status == 403) {
                fireSweetAlert('error',res.responseJSON.message);
            }

            if (res.status == 429) {
                fireSweetAlert('error',res.responseJSON.message);
            }

            if (res.status == 500) {
                fireSweetAlert('error',"Internal Server Error");
            }
        },
    });

    $(document).ajaxStart(function (e) {
        loadingButton()
    });

    $(document).ajaxComplete(function () {
        unLoadingButton();
    });

});

function initToast() {
    return Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
    });
}

function initUploader() {
    $('.dropify').dropify({
        messages: {
            'default': 'Drag and drop your avatar',
            'replace': 'Drag and drop or click to replace your avatar',
            'remove':  'Remove',
            'error':   'Ooops, something wrong happended.'
        }
    });
}

function fireSweetAlert(type,msg) {
    Toast = initToast();

    Toast.fire({
        icon: type,
        title: msg
    })
}

function loadingButton() {
    $('button.ajax-start').attr('disabled',true);
}

function unLoadingButton() {
    $('button.ajax-start').attr('disabled',false);
}


function initSelector(url, elementSelector, noResults) {
    $(elementSelector).select2({
        language: {
            noResults: function () {
                return noResults;
            },
        },
        placeholder: $(elementSelector).attr("data-placeholder"),
        allowClear: !$(elementSelector).prop("multiple"),
        enable: false,
        ajax: {
            url: url,
            dataType: "json",
            data: function (params) {
                return {
                    page: params.page || 1,
                    ...params,
                };
            },
            processResults: function (data) {
                return {
                    results: mapSelect2Data(data),
                    pagination: {
                        more: data.meta.current_page < data.meta.last_page,
                    },
                };
                // return mapSelect2Data(data);
            },
        },
    });
    $.fn.Select2UpdatePlaceholder = function (newPlaceholder) {
        var $select2Container = $(this).data('select2').$container;
        return $select2Container.find('.select2-selection__placeholder').text(newPlaceholder);
    };
    $(elementSelector)
        .on("select2:select", function (e) {
            if (
                (!$(elementSelector).prop("multiple") && $(this).val()) ||
                ($(elementSelector).prop("multiple") && $(this).val().length)
            ) {
                $(this).removeClass("error");
                // $(this).parents('.input-container').find('span.error').hide()
                if ($(`${elementSelector}-error`).length) {
                    $(`${elementSelector}-error`).hide();
                    $(this).parents(".input-container").find(".select2-selection").css("border", "1px solid #ced4da");
                }
            }
        })
        .trigger("change");

    $(elementSelector)
        .on("select2:unselect select2:clear", function (e) {
            if (
                e.type == "select2:clear" ||
                (!$(elementSelector).prop("multiple") && !$(this).val()) ||
                ($(elementSelector).prop("multiple") && !$(this).val().length)
            ) {
                $(this).addClass("error");
                if ($(`${elementSelector}-error`).length) {
                    $(`${elementSelector}-error`).show();
                    $(this).parents(".input-container").find(".select2-selection").css("border", "1px solid red");
                }
            }
        })
        .trigger("change");
}

function mapSelect2Data(data) {
    console.log(data.data)
    var data2 = [];
    data.data.forEach(function (item) {
        data2.push({
            id: item.id,
            text: item.name,
        });
    });
    return data2;
}

function initResourceSelector(endPoint, elementSelector, noResults, queryParamsKey) {
    initSelector(
        function () {
            return `/api/${endPoint}?` + new URLSearchParams(resourceSelectorQueryParams[queryParamsKey]).toString();
        },
        elementSelector,
        noResults,
        queryParamsKey
    );
}

function initDomSelectors(selectors) {
    $(selectors).each(function(i, obj) {
        console.log(obj.id);
        jElemName = $(`#${obj.id}`).attr('data-name');
        jElemPluralName = $(`#${obj.id}`).attr('data-plural');
        resourceSelectorQueryParams[jElemName] = {};
        initResourceSelector(jElemPluralName,`#${obj.id}`, `No ${jElemPluralName} found!`, jElemName);
    });
}

function initDatePicker(elementSelector, pairSelector = null) {
    $(elementSelector).Zebra_DatePicker({
        show_icon: true,
        direction: true,
        format: 'Y-m-d H:i:s',
        pair: $(pairSelector)
    });
}

function initDomDatePicker(elementsSelector) {
    $(elementsSelector).each(function (i, obj) {
        $(`#${obj.id}`).Zebra_DatePicker({
            show_icon: true,
        });
    });
}


var validationProperties = {
    highlight: function (element, errorClass) {
        $(element).css("border", "1px solid red");
        $(element).next("span").find(".select2-selection").css("border", "1px solid red");
    },

    unhighlight: function (element, errorClass) {
        $(element).css("border", "1px solid #ced4da");
        $(element).next("span").find(".select2-selection").css("border", "1px solid #ced4da");
    },

    errorElement: "span",

    errorPlacement: function (error, element) {
        error.appendTo(element.parents(".input-container"));
    },
};

function initValidation(formSelector ,submitHandler) {
   return $(formSelector).validate({

        rules:this.rules,

        ...validationProperties,

        submitHandler: function (form) {
            submitHandler()
        },
    });
}

var resourceSelectorQueryParams = {};
let isEdit = false;
let resourceId = 0;
$(function () {
    initDomSelectors(`#create-${resource}-form .selectors`);
    initDomDatePicker('input[name="date_of_birth"]');
    initUploader();
    let defaultAttachment = $('.dropify').attr('data-default-file');
    let createRoles= formRules();
    let createValidator = initValidation.call(createRoles,`#create-${resource}-form`,() => {
        saveResource(`#create-${resource}-form`,'.save-btn').done((res) => {
            $(`#create-${resource}-modal`).modal("hide");
        }).always(()=> {
            $(`#${resource}-table`).DataTable().ajax.reload();
        });
    });

    $(`#create-${resource}-modal`).on('hide.bs.modal', function(){
        $(`#create-${resource}-form`).trigger("reset");
        createValidator.resetForm();
        $(`#create-${resource}-form select`).each(function(i, obj) {
            let jElem = $(`#${obj.id}`);
            jElem.val('').trigger('change');
        });
    });

    console.log(createRoles);

    $(document).on("click", ".create-btn", function () {
        isEdit = false;
        $(`#create-${resource}-modal`).modal("show");

    });

    $(document).on("click", ".edit-btn", async function () {
        isEdit = true;
        const url = $(this).attr('data-url');
        await getModal(url,this).done(res => {
            $(`#edit-modal-container`).html(res);
            $(`#edit-${resource}-modal`).modal('show');
            resourceId = $(`#edit-${resource}-form`).attr('data-id');
            initDomSelectors(`#edit-${resource}-form .selectors`);
            initDomDatePicker(`#edit-${resource}-form input[name="date_of_birth"]`);
            initUploader();
            let editRoles = formRules();
            initValidation.call(editRoles,`#edit-${resource}-form` ,() => {
                saveResource(`#edit-${resource}-form`,'.save-btn').done((res) => {
                    $(`#edit-${resource}-modal`).modal("hide");
                }).always(()=> {
                    $(`#${resource}-table`).DataTable().ajax.reload();
                });
            });
        });
    });

    $(document).on("click", ".show-btn", async function () {
        const url = $(this).attr('data-url');
        await getModal(url,this).done(res => {
            $(`#show-modal-container`).html(res);
            $(`#show-${resource}-modal`).modal('show');
        });
    });

    $(document).on("click", ".delete-btn", function () {
        showConfirmDeleteModal($(this).attr("data-id"), $(this).attr("data-url"));
    });

    $(document).on("click", ".toggle-status-btn", function () {
        showConfirmBanModal($(this).attr("data-id"), $(this).attr("data-url") + '/toggle-ban',$(this).text());
    });

    $(document).on("click", ".confirm-delete-btn", function () {
        const url = $(this).attr("data-url");
        const id = $(this).attr("data-id");
        destroyResource(url,this).done((res) => {
            $(`.delete-btn[data-id=${id}]`).parents('table').DataTable().ajax.reload();
        }).always(()=> {
            $("#delete-modal").modal("hide");
        });
    });

    $(document).on("click", ".confirm-toggle-status-btn", function () {
        const url = $(this).attr("data-url");
        const id = $(this).attr("data-id");
        toggleBanResource(url,this).done((res) => {
            $(`.toggle-status-btn[data-id=${id}]`).parents('table').DataTable().ajax.reload();
        }).always(()=> {
            $("#ban-modal").modal("hide");
        });
    });

    $(document).on("click", ".attend-btn",async function () {
        const url = $(this).attr("data-url");
        const id = $(this).attr("data-id");
       await attendTrainingSession(url).always(()=> {
           $(`.attend-btn[data-id=${id}]`).parents('table').DataTable().ajax.reload();
       });
    });

});

function showConfirmDeleteModal(id, url) {
    $("#delete-modal").modal("show");
    $("#delete-modal").find(".confirm-delete-btn").attr("data-id", id);
    $("#delete-modal").find(".confirm-delete-btn").attr("data-url", url);
}

function showConfirmBanModal(id, url, text) {
    $("#ban-modal").modal("show");
    $("#ban-modal").find(".toggle-span").text(text.toLowerCase());
    $("#ban-modal").find(".confirm-toggle-status-btn span").text(text);
    $("#ban-modal").find(".confirm-toggle-status-btn").attr("data-id", id);
    $("#ban-modal").find(".confirm-toggle-status-btn").attr("data-url", url);
}

function destroyResource(url,elem) {
    return $.ajax({
        url:url,
        type: "DELETE",
        cache: false,
        beforeSend: function(){
            $(elem).addClass('button--loading');
        },
        complete: function(){
            $(elem).removeClass('button--loading');
        },
    });
}

function toggleBanResource(url,elem) {
    return $.ajax({
        url:url,
        type: "PUT",
        cache: false,
        beforeSend: function(){
            $(elem).addClass('button--loading');
        },
        complete: function(){
            $(elem).removeClass('button--loading');
        },
    });
}

function saveResource(formSelector,elem) {
    const formElement = $(formSelector);
    const action = formElement.attr("action");
    const method = formElement.attr("method");
    const data = new FormData(formElement[0]);
    return $.ajax({
        url: action,
        type: method,
        cache: false,
        data: data,
        contentType: false,
        processData: false,
        beforeSend: function(){
            $(elem).addClass('button--loading');
        },
        complete: function(){
            $(elem).removeClass('button--loading');
        },
    });
}

function getModal(url,elem) {
    return $.ajax({
        url,
        type: 'GET',
        cache: false,
        beforeSend: function(){
            $(elem).addClass('button--loading');
        },
        complete: function(){
            $(elem).removeClass('button--loading');
        },
    });
}

function attendTrainingSession(url) {
    return $.ajax({
        url,
        type: 'PUT',
        cache: false,
    });
}

